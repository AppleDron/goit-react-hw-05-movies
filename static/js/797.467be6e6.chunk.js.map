{"version":3,"file":"static/js/797.467be6e6.chunk.js","mappings":"wNA2DA,UAtDmB,WAAO,IAADA,EACvBC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAP,EAAAA,EAAAA,GAAAK,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAAqC,QAA5Bd,EAAGY,EAAaG,IAAI,gBAAQ,IAAAf,EAAAA,EAAI,GAC/CgB,GAAsCd,EAAAA,EAAAA,UAASY,GAAwB,IAAGG,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAAnEE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,IAElCG,EAAAA,EAAAA,YAAU,WACJF,IACFG,EAAAA,EAAAA,IAAYH,GACTI,MAAK,SAAAC,GACCL,GAGLZ,EAAYiB,EAASC,KAAKC,QAC5B,IACCC,OAAM,SAAAC,GACLC,IAAAA,OAAAA,QAAwBD,EAC1B,GAEN,GAAG,CAACT,IAUJ,OACEW,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAME,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAIC,EAAYF,EAAEG,OAAOjB,YAAYkB,MACnB,KAAdF,IACJf,EAAee,GACfF,EAAEG,OAAOjB,YAAYkB,MAAQ,GAC/B,EAIiCN,SAAA,EAC3BO,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,KAAK,cACLC,SAAU,SAAAR,GAAC,OAAInB,EAAgB,CAAE4B,MAAOT,EAAEG,OAAOC,OAAQ,KAE3DC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQR,SAAC,eAGxBO,EAAAA,EAAAA,KAAA,MAAAP,SACW,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAUqC,KAAI,SAAAC,GAAI,OACjBN,EAAAA,EAAAA,KAAA,MAAAP,UACEO,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaH,EAAKI,IAAMC,MAAO,CAAEC,KAAM1C,GAAWuB,SACvDa,EAAKO,kBAFDP,EAAKI,GAIT,QAKf,C","sources":["pages/MoviesPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { searchMovie } from 'services/themoviedbAPI';\nimport Notiflix from 'notiflix';\n\nconst MoviesPage = () => {\n  const [filmList, setFilmList] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n  const [searchQuery, setSearchQuery] = useState(movieName ? movieName : '');\n\n  useEffect(() => {\n    if (searchQuery) {\n      searchMovie(searchQuery)\n        .then(response => {\n          if (!searchQuery) {\n            return;\n          }\n          setFilmList(response.data.results);\n        })\n        .catch(error => {\n          Notiflix.Notify.failure(error);\n        });\n    }\n  }, [searchQuery]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let formValue = e.target.searchQuery.value;\n    if (formValue === '') return;\n    setSearchQuery(formValue);\n    e.target.searchQuery.value = '';\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          onChange={e => setSearchParams({ query: e.target.value })}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      <ul>\n        {filmList?.map(film => (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.original_title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["_searchParams$get","_useState","useState","_useState2","_slicedToArray","filmList","setFilmList","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieName","get","_useState3","_useState4","searchQuery","setSearchQuery","useEffect","searchMovie","then","response","data","results","catch","error","Notiflix","_jsxs","children","onSubmit","e","preventDefault","formValue","target","value","_jsx","type","name","onChange","query","map","film","Link","to","concat","id","state","from","original_title"],"sourceRoot":""}